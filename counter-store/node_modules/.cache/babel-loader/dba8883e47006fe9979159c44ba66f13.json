{"ast":null,"code":"import _classCallCheck from \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"G:\\\\emVcTself\\\\ReactApp\\\\counter-store\\\\src\\\\Components\\\\Counter1.jsx\";\n//using Class library\nimport React, { Component } from \"react\";\nimport \"../Sheets/Sheets.css\"; //ClassJSX-extends component\n\nvar Countero =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Countero, _Component);\n\n  function Countero() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Countero);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Countero)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      count: 0\n    };\n\n    _this.handleBtnIncrement = function () {\n      // console.log(\"increment clicked\", this);\n      // console.log(product);\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.otherNewArrowMethod = function () {};\n\n    return _this;\n  }\n\n  _createClass(Countero, [{\n    key: \"render\",\n\n    /*  constructor(){\r\n      super();\r\n      this.handleBtnIncrement = this.handleBtnIncrement.bind(this);\r\n    } */\n    //No.2 ======Special delivery method - that report to the Dom.=========================\n    // necessary method-1\n    value: function render() {\n      var _this2 = this;\n\n      //delivery may take some local property_variables here that will be reporting to the Dom.\n      //create provisory local_style back-CSS\n      //report what you want below the return:\n      return React.createElement(\"div\", {\n        className: \"boxit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: this.colorBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \" \", this.formatCount()), React.createElement(\"button\", {\n        // onClick={this.handleBtnIncrement}\n        // onClick={this.doHandleInrement}\n        onClick: function onClick() {\n          return _this2.handleBtnIncrement();\n        } //learn to do it this way\n        // onClick={ () =>this.handleBtnIncrement(product)}\n        ,\n        className: \"btn  btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \" Click to Increment \")); //end report\n    } //end delivery report\n    //=============================//Create all functions or methods after render\\\\==========================================================================\n    //function-5\n\n  }, {\n    key: \"rendTags\",\n    //function-5.1\n\n    /*\r\n    doHandleInrement =()=>{\r\n      this.handleBtnIncrement({ id: 1});\r\n    };\r\n    */\n    //No.3 ============= Some other methods to get control==========================\n    //create this.method-2 to map and report list_tags\n    value: function rendTags() {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" \", \"Recap # 2: Composing Components \"), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \" \", 'Pass Data'), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \" \", 'Raise and handle Events '), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \" \", \"Multiple Components in Sync \"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \" \", \"Funtional Components \"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" \", \"Lifecycle Hooks \")));\n    } //end of this.method-2\n    //method-3\n\n  }, {\n    key: \"formatCount\",\n    value: function formatCount() {\n      return this.state.count;\n    } //method-4 CLASSIC_condition to get changed effect color on badgeText\n\n  }, {\n    key: \"colorBadgeClasses\",\n    value: function colorBadgeClasses() {\n      var color_badge = \"badge m-2 badge-\";\n      color_badge += this.state.count === 0 ? \"warning\" : \"primary\";\n      return color_badge;\n    } //method-6\n\n  }, {\n    key: \"usedOldMethod\",\n    //method-7\n    value: function usedOldMethod() {}\n  }]);\n\n  return Countero;\n}(Component); //end class\n//Finally class available to use(importable class in index.js).\n\n\nexport default Countero; //========================******==============================","map":{"version":3,"sources":["G:\\emVcTself\\ReactApp\\counter-store\\src\\Components\\Counter1.jsx"],"names":["React","Component","Countero","state","count","handleBtnIncrement","setState","otherNewArrowMethod","colorBadgeClasses","formatCount","color_badge"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,sBAAP,C,CAEA;;IACMC,Q;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACHC,MAAAA,KAAK,EAAE;AADJ,K;;UAyCTC,kB,GAAqB,YAAM;AAC1B;AACD;AAEE,YAAKC,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,MAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,K;;UA2CAG,mB,GAAsB,YAAM,CAAE,C;;;;;;;;AArF9B;;;;AAKA;AACA;6BACS;AAAA;;AACP;AACA;AAEA;AACA,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AAAM,QAAA,SAAS,EAAE,KAAKC,iBAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA6C,KAAKC,WAAL,EAA7C,CAJF,EAKE;AACC;AACA;AACC,QAAA,OAAO,EAAG;AAAA,iBAAK,MAAI,CAACJ,kBAAL,EAAL;AAAA,SAHZ,CAKE;AACD;AAND;AAQE,QAAA,SAAS,EAAC,2BARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCALF,CADF,CALO,CAwBJ;AAEJ,K,CAAC;AACJ;AAEC;;;;AAQC;;AACA;;;;;AAOA;AACA;+BACW;AAGT,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,kCAAN,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,WAAN,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,0BAAN,CAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,8BAAN,CAHA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,uBAAN,CAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,kBAAN,CALA,CAHF,CADF;AAcD,K,CAAC;AACF;;;;kCACc;AACZ,aAAO,KAAKF,KAAL,CAAWC,KAAlB;AACD,K,CAED;;;;wCACoB;AAClB,UAAIM,WAAW,GAAG,kBAAlB;AACAA,MAAAA,WAAW,IAAI,KAAKP,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAApD;AACA,aAAOM,WAAP;AACD,K,CAED;;;;AAEA;oCACgB,CAAE;;;;EA7FGT,S,GA+FrB;AACF;;;AACA,eAAeC,QAAf,C,CACA","sourcesContent":["//using Class library\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"../Sheets/Sheets.css\";\r\n\r\n//ClassJSX-extends component\r\nclass Countero extends Component {\r\n  //No.1 ======= Les champs propriétés de la classe Modèle. ==========================\r\n  state = {\r\n       count: 0 \r\n  };\r\n\r\n  /*  constructor(){\r\n    super();\r\n    this.handleBtnIncrement = this.handleBtnIncrement.bind(this);\r\n  } */\r\n\r\n  //No.2 ======Special delivery method - that report to the Dom.=========================\r\n  // necessary method-1\r\n  render() {\r\n    //delivery may take some local property_variables here that will be reporting to the Dom.\r\n    //create provisory local_style back-CSS\r\n \r\n    //report what you want below the return:\r\n    return (\r\n      <div className=\"boxit\">\r\n\r\n      \r\n      \r\n        <span className={this.colorBadgeClasses()}> {this.formatCount()}</span>\r\n        <button\r\n         // onClick={this.handleBtnIncrement}\r\n         // onClick={this.doHandleInrement}\r\n          onClick={ () =>this.handleBtnIncrement()}\r\n\r\n          //learn to do it this way\r\n         // onClick={ () =>this.handleBtnIncrement(product)}\r\n\r\n          className=\"btn  btn-secondary btn-sm\"\r\n        > Click to Increment </button>\r\n      \r\n       \r\n      </div>\r\n    ); //end report\r\n\r\n  } //end delivery report\r\n//=============================//Create all functions or methods after render\\\\==========================================================================\r\n  \r\n //function-5\r\n handleBtnIncrement = () => {\r\n  // console.log(\"increment clicked\", this);\r\n // console.log(product);\r\n\r\n   this.setState({ count: this.state.count + 1 });\r\n };\r\n\r\n  //function-5.1\r\n  /*\r\n  doHandleInrement =()=>{\r\n    this.handleBtnIncrement({ id: 1});\r\n  };\r\n*/\r\n\r\n\r\n  //No.3 ============= Some other methods to get control==========================\r\n  //create this.method-2 to map and report list_tags\r\n  rendTags() {\r\n  \r\n\r\n    return (\r\n      <ul>\r\n       \r\n        <li> {\"Recap # 2: Composing Components \"}</li>\r\n        <ol>\r\n        <li> {'Pass Data'}</li>\r\n        <li> {'Raise and handle Events '}</li>\r\n        <li> {\"Multiple Components in Sync \"}</li>\r\n        <li> {\"Funtional Components \"}</li>\r\n        <li> {\"Lifecycle Hooks \"}</li>\r\n        </ol>\r\n\r\n      </ul>\r\n    );\r\n  } //end of this.method-2\r\n  //method-3\r\n  formatCount() {\r\n    return this.state.count;\r\n  }\r\n\r\n  //method-4 CLASSIC_condition to get changed effect color on badgeText\r\n  colorBadgeClasses() {\r\n    let color_badge = \"badge m-2 badge-\";  \r\n    color_badge += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    return color_badge;\r\n  }\r\n \r\n  //method-6\r\n  otherNewArrowMethod = () => {};\r\n  //method-7\r\n  usedOldMethod() {}\r\n\r\n} //end class\r\n//Finally class available to use(importable class in index.js).\r\nexport default Countero;\r\n//========================******==============================\r\n"]},"metadata":{},"sourceType":"module"}